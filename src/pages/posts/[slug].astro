---
import { getCollection, type CollectionEntry } from 'astro:content';
import Layout from '../../layouts/BlogPost.astro';
import FormattedDate from '../../components/FormattedDate.astro';

export async function getStaticPaths() {
  const posts = await getCollection('posts');
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

type Props = {
  post: CollectionEntry<'posts'>;
};

const { post } = Astro.props;
const { Content } = await post.render();
---

<Layout>
  <article>
    <header class="mb-8">
      <h1 class="text-4xl font-bold mb-4">{post.data.title}</h1>
      <div class="flex items-center gap-4 text-gray-600 mb-4">
        <time datetime={post.data.pubDate.toISOString()}>
          <FormattedDate date={post.data.pubDate} />
        </time>
        {post.data.updatedDate && (
          <time datetime={post.data.updatedDate.toISOString()}>
            更新: <FormattedDate date={post.data.updatedDate} />
          </time>
        )}
      </div>
      {post.data.description && (
        <p class="text-lg text-gray-700 mb-4">{post.data.description}</p>
      )}
      {post.data.category && (
        <div class="mb-4">
          <a href={`/category/${encodeURIComponent(post.data.category)}`} class="text-blue-600 hover:underline">
            カテゴリー: {post.data.category}
          </a>
        </div>
      )}
      {post.data.tags && post.data.tags.length > 0 && (
        <ul class="flex flex-wrap gap-2 mb-4">
          {post.data.tags.map((tag) => (
            <li>
              <a href={`/tag/${encodeURIComponent(tag)}`} class="text-sm text-gray-600 hover:text-blue-600">
                #{tag}
              </a>
            </li>
          ))}
        </ul>
      )}
    </header>
    
    {post.data.heroImage && (
      <div class="mb-8">
        <img src={post.data.heroImage} alt={post.data.title} class="w-full h-auto rounded-lg" />
      </div>
    )}
    
    <div class="prose prose-lg max-w-none">
      <Content />
    </div>
  </article>
</Layout> 